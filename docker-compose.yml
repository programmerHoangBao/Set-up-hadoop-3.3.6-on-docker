version: "3"

services:
  namenode:
    build:
      context: .
      dockerfile: base/Dockerfile
    container_name: namenode
    hostname: namenode
    restart: always
    ports:
      - 9870:9870 # NameNode Web UI
      - 9000:9000 # HDFS RPC
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env
    command: ["hdfs", "namenode"]

  datanode1:
    build:
      context: .
      dockerfile: base/Dockerfile
    container_name: datanode1
    hostname: datanode1
    restart: always
    depends_on:
      - namenode
    ports:
      - 9864:9864 # DataNode1 Web UI
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    command: ["hdfs", "datanode"]

  datanode2:
    build:
      context: .
      dockerfile: base/Dockerfile
    container_name: datanode2
    hostname: datanode2
    restart: always
    depends_on:
      - namenode
    ports:
      - 9865:9864 # DataNode2 Web UI
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    command: ["hdfs", "datanode"]

  datanode3:
    build:
      context: .
      dockerfile: base/Dockerfile
    container_name: datanode3
    hostname: datanode3
    restart: always
    depends_on:
      - namenode
    ports:
      - 9866:9864 # DataNode3 Web UI
    volumes:
      - hadoop_datanode3:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
    command: ["hdfs", "datanode"]

  resourcemanager:
    build:
      context: .
      dockerfile: base/Dockerfile
    container_name: resourcemanager
    hostname: resourcemanager
    restart: always
    depends_on:
      - namenode
      - datanode1
    ports:
      - 8088:8088 # ResourceManager Web UI
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864"
    env_file:
      - ./hadoop.env
    command: ["yarn", "resourcemanager"]

  nodemanager1:
    build:
      context: .
      dockerfile: base/Dockerfile
    container_name: nodemanager1
    hostname: nodemanager1
    restart: always
    depends_on:
      - resourcemanager
    ports:
      - 8042:8042 # NodeManager1 Web UI
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
    command: ["yarn", "nodemanager"]

  nodemanager2:
    build:
      context: .
      dockerfile: base/Dockerfile
    container_name: nodemanager2
    hostname: nodemanager2
    restart: always
    depends_on:
      - resourcemanager
    ports:
      - 8043:8042 # NodeManager2 Web UI
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode2:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
    command: ["yarn", "nodemanager"]

  nodemanager3:
    build:
      context: .
      dockerfile: base/Dockerfile
    container_name: nodemanager3
    hostname: nodemanager3
    restart: always
    depends_on:
      - resourcemanager
    ports:
      - 8044:8042 # NodeManager3 Web UI
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode3:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
    command: ["yarn", "nodemanager"]

  historyserver:
    build:
      context: .
      dockerfile: base/Dockerfile
    container_name: historyserver
    hostname: historyserver
    restart: always
    depends_on:
      - resourcemanager
    ports:
      - 8188:8188 # HistoryServer Web UI
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
    command: ["mapred", "historyserver"]

volumes:
  hadoop_namenode:
  hadoop_datanode1:
  hadoop_datanode2:
  hadoop_datanode3:
  hadoop_historyserver:
